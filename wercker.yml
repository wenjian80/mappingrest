build:
  box: maven:3.6.0-jdk-8-alpine
  steps:
    - script:
        name: Install procps
        code: apk --no-cache add procps
    - wercker/maven:
        goals: clean package
        cache_repo: true
        profiles: prod


push-release:
  box: openjdk:8-jre-alpine
  steps:
    - script:
        name: copy jar file to source root
        code: |
          mkdir $WERCKER_SOURCE_DIR/dist
          cp $WERCKER_SOURCE_DIR/target/mappingrest.jar $WERCKER_SOURCE_DIR/dist/mappingrest.jar
    #- script:
    #    name: Setup monitoring agent
    #a
    #    code: |
    #      unzip $WERCKER_SOURCE_DIR/deploy/monitoring/apmagent.zip -d ./dist
    - script:
        name: clear cache content
        code: |
          rm -rf $WERCKER_CACHE_DIR
          rm -rf $WERCKER_OUTPUT_DIR
          rm -rf $WERCKER_SOURCE_DIR/target
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        registry: $DOCKER_REGISTRY
        repository: $REPOSITORY/mydemo/mappingrest        
        cmd: java -Djava.security.egd=file:/dev/./urandom -jar /pipeline/source/dist/mappingrest.jar

inject-secret:
  box:
    id: alpine
    cmd: /bin/sh
  steps:

    - kubectl:
        name: delete secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete secret oke-demo-secret -n $OKE_NAMESPACE; echo delete registry secret

    - kubectl:
        name: create secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry $OKE_SECRET --docker-server=$DOCKER_REGISTRY --docker-username="$DOCKER_USERNAME" --docker-password="$DOCKER_PASSWORD" --docker-email=$DOCKER_EMAIL -n $OKE_NAMESPACE; echo create registry secret


deploy-to-cluster:
  box:
    id: alpine
    cmd: /bin/sh
  steps:

    - bash-template:
        input: ./kubernetes/*.yaml*
    
    - kubectl:
        name: deploy to kubernetes
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_SOURCE_DIR/kubernetes/ -n ${OKE_NAMESPACE}